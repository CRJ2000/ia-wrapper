{"name":"Ia-wrapper","tagline":"A python interface to Archive.org","body":"A python interface to archive.org\r\n=================================\r\n\r\n![image](https://travis-ci.org/jjjake/ia-wrapper.png?branch=master%0A%20%20%20%20%20:target:%20https://travis-ci.org/jjjake/ia-wrapper)\r\n\r\n![image](https://pypip.in/d/internetarchive/badge.png%0A%20%20%20%20%20:target:%20https://pypi.python.org/pypi/internetarchive)\r\n\r\nThis package installs a CLI tool named `ia` for using archive.org from\r\nthe command-line. It also installs the `internetarchive` python module\r\nfor programatic access to archive.org. Please report all bugs and issues\r\non [Github](https://github.com/jjjake/ia-wrapper/issues).\r\n\r\nInstallation\r\n------------\r\n\r\nYou can install this module via pip:\r\n\r\n`pip install internetarchive`\r\n\r\nAlternatively, you can install a few extra dependencies to help speed\r\nthings up a bit:\r\n\r\n`pip install \"internetarchive[speedups]\"`\r\n\r\nThis will install [ujson](https://pypi.python.org/pypi/ujson) for faster\r\nJSON parsing, and [gevent](https://pypi.python.org/pypi/gevent) for\r\nconcurrent downloads.\r\n\r\nIf you want to install this module globally on your system instead of\r\ninside a `virtualenv`, use sudo:\r\n\r\n`sudo pip install internetarchive`\r\n\r\nCommand-Line Usage\r\n==================\r\n\r\nHelp is available by typing `ia --help`. You can also get help on a\r\ncommand: `ia <command> --help`. Available subcommands are `configure`,\r\n`metadata`, `upload`, `download`, `search`, `mine`, and `catalog`.\r\n\r\nDownloading\r\n-----------\r\n\r\nTo download the entire\r\n[TripDown1905](https://archive.org/details/TripDown1905) item:\r\n\r\n~~~~ {.sourceCode .bash}\r\n$ ia download TripDown1905\r\n~~~~\r\n\r\n`ia download` usage examples:\r\n\r\n~~~~ {.sourceCode .bash}\r\n#download just the mp4 files using ``--glob``\r\n$ ia download TripDown1905 --glob='*.mp4'\r\n\r\n#download all the mp4 files using ``--formats``:\r\n$ ia download TripDown1905 --format='512Kb MPEG4'\r\n\r\n#download multiple formats from an item:\r\n$ ia download TripDown1905 --format='512Kb MPEG4' --format='Ogg Video'\r\n\r\n#list all the formats in an item:\r\n$ ia metadata --formats TripDown1905\r\n\r\n#download a single file from an item:\r\n$ ia download TripDown1905 TripDown1905_512kb.mp4\r\n\r\n#download multiple files from an item:\r\n$ ia download TripDown1905 TripDown1905_512kb.mp4 TripDown1905.ogv\r\n~~~~\r\n\r\nUploading\r\n---------\r\n\r\nYou can use the provided `ia` command-line tool to upload items. You\r\nneed to supply your IAS3 credentials in environment variables in order\r\nto upload. You can retrieve S3 keys from\r\n<https://archive.org/account/s3.php>\r\n\r\n~~~~ {.sourceCode .bash}\r\n$ export AWS_ACCESS_KEY_ID='xxx'\r\n$ export AWS_SECRET_ACCESS_KEY='yyy'\r\n\r\n$ ia upload <identifier> file1 file2 --metadata=\"title:foo\" --metadata=\"blah:arg\"\r\n~~~~\r\n\r\nMetadata\r\n--------\r\n\r\nYou can use the `ia` command-line tool to download item metadata in JSON\r\nformat:\r\n\r\n~~~~ {.sourceCode .bash}\r\n$ ia metadata TripDown1905\r\n~~~~\r\n\r\nYou can also modify metadata. Be sure that the AWS\\_ACCESS\\_KEY\\_ID and\r\nAWS\\_SECRET\\_ACCESS\\_KEY environment variables are set.\r\n\r\n~~~~ {.sourceCode .bash}\r\n$ ia metadata <identifier> --modify=\"foo:bar\" --modify=\"baz:foooo\"\r\n~~~~\r\n\r\nSearching\r\n---------\r\n\r\nYou can search using the provided `ia` command-line script:\r\n\r\n~~~~ {.sourceCode .bash}\r\n$ ia search 'subject:\"market street\" collection:prelinger'\r\n~~~~\r\n\r\nParallel Downloading\r\n--------------------\r\n\r\nIf you have the GNU `parallel` tool intalled, then you can combine\r\n`ia search` and `ia metadata` to quickly retrieve data for many items in\r\nparallel:\r\n\r\n~~~~ {.sourceCode .bash}\r\n$ ia search 'subject:\"market street\" collection:prelinger' | parallel -j40 'ia metadata {} > {}_meta.json'\r\n~~~~\r\n\r\nPython module usage\r\n===================\r\n\r\nBelow is brief overview of the `internetarchive` Python library. Please\r\nrefer to the [API\r\ndocumentation](http://ia-wrapper.readthedocs.org/en/latest/) for more\r\nspecific details.\r\n\r\nDownloading\r\n-----------\r\n\r\nThe Internet Archive stores data in\r\n[items](http://blog.archive.org/2011/03/31/how-archive-org-items-are-structured/).\r\nYou can query the archive using an item identifier:\r\n\r\n~~~~ {.sourceCode .python}\r\n>>> import internetarchive\r\n>>> item = internetarchive.Item('stairs')\r\n>>> print item.metadata\r\n~~~~\r\n\r\nItems contains files. You can download the entire item:\r\n\r\n~~~~ {.sourceCode .python}\r\n>>> item.download()\r\n~~~~\r\n\r\nor you can download just a particular file:\r\n\r\n~~~~ {.sourceCode .python}\r\n>>> f = item.file('glogo.png')\r\n>>> f.download() #writes to disk\r\n>>> f.download('/foo/bar/some_other_name.png')\r\n~~~~\r\n\r\nYou can iterate over files:\r\n\r\n~~~~ {.sourceCode .python}\r\n>>> for f in item.files():\r\n...     print f.name, f.sha1\r\n~~~~\r\n\r\nUploading\r\n---------\r\n\r\nYou can use the IA's S3-like interface to upload files to an item. You\r\nneed to supply your IAS3 credentials in environment variables in order\r\nto upload. You can retrieve S3 keys from\r\n<https://archive.org/account/s3.php>\r\n\r\n~~~~ {.sourceCode .python}\r\n>>> import os\r\n>>> os.environ['AWS_ACCESS_KEY_ID']='x'\r\n>>> os.environ['AWS_SECRET_ACCESS_KEY']='y'\r\n>>> item = internetarchive.Item('new_identifier')\r\n>>> item.upload('/path/to/image.jpg', metadata=dict(mediatype='image', creator='Jake Johnson'))\r\n~~~~\r\n\r\nItem-level metadata must be supplied with the first file uploaded to an\r\nitem.\r\n\r\nYou can upload additional files to an existing item:\r\n\r\n~~~~ {.sourceCode .python}\r\n>>> item = internetarchive.Item('existing_identifier')\r\n>>> item.upload(['/path/to/image2.jpg', '/path/to/image3.jpg'])\r\n~~~~\r\n\r\nYou can also upload file-like objects:\r\n\r\n~~~~ {.sourceCode .python}\r\n>>> import StringIO\r\n>>> fh = StringIO.StringIO('hello world')\r\n>>> fh.name = 'hello_world.txt\r\n>>> item.upload(fh)\r\n~~~~\r\n\r\nModifying Metadata\r\n------------------\r\n\r\nYou can modify metadata for existing items, using the\r\n`item.modify_metadata()` function. This uses the [IA Metadata\r\nAPI](http://blog.archive.org/2013/07/04/metadata-api/) under the hood\r\nand requires your IAS3 credentials.\r\n\r\n~~~~ {.sourceCode .python}\r\n>>> import os\r\n>>> os.environ['AWS_ACCESS_KEY_ID']='x'\r\n>>> os.environ['AWS_SECRET_ACCESS_KEY']='y'\r\n>>> item = internetarchive.Item('my_identifier')\r\n>>> md = dict(blah='one', foo=['two', 'three'])\r\n>>> item.modify_metadata(md)\r\n~~~~\r\n\r\nSearching\r\n---------\r\n\r\nYou can search for items using the [archive.org advanced search\r\nengine](https://archive.org/advancedsearch.php):\r\n\r\n~~~~ {.sourceCode .python}\r\n>>> import internetarchive\r\n>>> search = internetarchive.Search('collection:nasa')\r\n>>> print search.num_found\r\n186911\r\n~~~~\r\n\r\nYou can iterate over your results:\r\n\r\n~~~~ {.sourceCode .python}\r\n>>> for result in search.results:\r\n...     print result['identifier']\r\n~~~~\r\n\r\nA note about uploading items with mixed-case names\r\n--------------------------------------------------\r\n\r\nThe Internet Archive allows mixed-case item identifiers, but Amazon S3\r\ndoes not allow mixed-case bucket names. The `internetarchive` python\r\nmodule is built on top of the `boto` S3 module. `boto` disallows\r\ncreation of mixed-case buckets, but allows you to download from existing\r\nmixed-case buckets. If you wish to upload a new item to the Internet\r\nArchive with a mixed-case item identifier, you will need to monkey-patch\r\nthe `boto.s3.connection.check_lowercase_bucketname` function:\r\n\r\n~~~~ {.sourceCode .python}\r\n>>> import boto\r\n>>> def check_lowercase_bucketname(n):\r\n...     return True\r\n\r\n>>> boto.s3.connection.check_lowercase_bucketname = check_lowercase_bucketname\r\n\r\n>>> item = internetarchive.Item('TestUpload_pythonapi_20130812')\r\n>>> item.upload('file.txt', dict(mediatype='texts', creator='Internet Archive'))\r\nTrue\r\n~~~~\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}